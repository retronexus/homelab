server {
		
        # listen on specified ports
	listen 80;
        listen [::]:80;

        # define server names
        server_name blog.retronexus.net www.blog.retronexus.net;

        # defines the files that will be used as indexes when processing requests to the server.
        index index.php index.html index.htm;

        # root directory for requests to the server. the directory also is created as a mount point at build time for docker
        root /var/www/html;

        # Handle requests to the well-known dir, where certbot will place a temp file to validate that the DNS for the domain resolves to the server. 
        location ~ /.well-known/acme-challenge {
                allow all;
                root /var/www/html;
        }

        # try_files is used to check for files that match individual URI requests. Instead of 404 status as default, control is passed to wordpress index.php file with request arguments
        location / {
                try_files $uri $uri/ /index.php$is_args$args;
        }

        # Handles PHP processing and proxy these requests to the wordpress container. as the wordpress container will be based on php fpm image, also uncluding config options for FastCGI.
        # NGINX requires an independent PHP processor for PHP requests. In this case, these requests will be handled by the PHP-fprm processor thats included with the wordpress image. 
        # FastCGI specific directives, vars and options that will proxy requests to the wordpress app running on the wordpress container, set preferred index for the parsed URI and parse URI requests.
        location ~ \.php$ {
                try_files $uri =404;
                fastcgi_split_path_info ^(.+\.php)(/.+)$;
                fastcgi_pass wordpress:9000;
                fastcgi_index index.php;
                include fastcgi_params;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                fastcgi_param PATH_INFO $fastcgi_path_info;
        }

        # Handle htaccess files since nginx won't serve them. deny-all ensures that htaccess files will never be served to users.
        location ~ /\.ht {
                deny all;
        }

        # ensure that requests to favicon will not be logged
        location = /favicon.ico {
                log_not_found off; access_log off;
        }

        # ensure that requests to robots will not be logged
        location = /robots.txt {
                log_not_found off; access_log off; allow all;
        }

        # turns off logging for static asset requets and and ensures assets being cacheable
        location ~* \.(css|gif|ico|jpeg|jpg|js|png)$ {
                expires max;
                log_not_found off;
        }